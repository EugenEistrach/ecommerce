type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  products: Product
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
  products: ProductWhereInput
  products_is_null: Boolean
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  products: ProductRelateToOneInput
}

input ProductRelateToOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: ProductWhereUniqueInput
  disconnectAll: Boolean
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  products: ProductRelateToOneInput
}

input UsersCreateInput {
  data: UserCreateInput
}

type Product {
  id: ID!
  name: String
  description: String
  images(
    where: CloudImageWhereInput! = {}
    search: String
    sortBy: [SortCloudImagesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CloudImageOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [CloudImage!]
  _imagesMeta(
    where: CloudImageWhereInput! = {}
    search: String
    sortBy: [SortCloudImagesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CloudImageOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use imagesCount instead."
    )
  imagesCount(where: CloudImageWhereInput! = {}): Int
  status: String
  price: Int
  createdBy: User
}

type _QueryMeta {
  count: Int
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  images_every: CloudImageWhereInput
  images_some: CloudImageWhereInput
  images_none: CloudImageWhereInput
  status: String
  status_not: String
  status_in: [String]
  status_not_in: [String]
  price: Int
  price_not: Int
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  price_in: [Int]
  price_not_in: [Int]
  createdBy: UserWhereInput
  createdBy_is_null: Boolean
}

input ProductWhereUniqueInput {
  id: ID
}

enum SortProductsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  status_ASC
  status_DESC
  price_ASC
  price_DESC
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  status: OrderDirection
  price: OrderDirection
}

input ProductUpdateInput {
  name: String
  description: String
  images: CloudImageRelateToManyInput
  status: String
  price: Int
  createdBy: UserRelateToOneInput
}

input CloudImageRelateToManyInput {
  create: [CloudImageCreateInput]
  connect: [CloudImageWhereUniqueInput]
  disconnect: [CloudImageWhereUniqueInput]
  disconnectAll: Boolean
}

input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

input ProductsUpdateInput {
  id: ID!
  data: ProductUpdateInput
}

input ProductCreateInput {
  name: String
  description: String
  images: CloudImageRelateToManyInput
  status: String
  price: Int
  createdBy: UserRelateToOneInput
}

input ProductsCreateInput {
  data: ProductCreateInput
}

type CloudImage {
  id: ID!
  image: CloudinaryImage_File
  name: String
  products(
    where: ProductWhereInput! = {}
    search: String
    sortBy: [SortProductsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProductOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Product!]
  _productsMeta(
    where: ProductWhereInput! = {}
    search: String
    sortBy: [SortProductsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProductOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use productsCount instead."
    )
  productsCount(where: ProductWhereInput! = {}): Int
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
   Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input CloudImageWhereInput {
  AND: [CloudImageWhereInput!]
  OR: [CloudImageWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  image: String
  image_not: String
  image_in: [String]
  image_not_in: [String]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
}

input CloudImageWhereUniqueInput {
  id: ID
}

enum SortCloudImagesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

input CloudImageOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CloudImageUpdateInput {
  image: Upload
  name: String
  products: ProductRelateToManyInput
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ProductRelateToManyInput {
  create: [ProductCreateInput]
  connect: [ProductWhereUniqueInput]
  disconnect: [ProductWhereUniqueInput]
  disconnectAll: Boolean
}

input CloudImagesUpdateInput {
  id: ID!
  data: CloudImageUpdateInput
}

input CloudImageCreateInput {
  image: Upload
  name: String
  products: ProductRelateToManyInput
}

input CloudImagesCreateInput {
  data: CloudImageCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput): User
  createUsers(data: [UsersCreateInput]): [User]
  updateUser(id: ID!, data: UserUpdateInput): User
  updateUsers(data: [UsersUpdateInput]): [User]
  deleteUser(id: ID!): User
  deleteUsers(ids: [ID!]): [User]
  createProduct(data: ProductCreateInput): Product
  createProducts(data: [ProductsCreateInput]): [Product]
  updateProduct(id: ID!, data: ProductUpdateInput): Product
  updateProducts(data: [ProductsUpdateInput]): [Product]
  deleteProduct(id: ID!): Product
  deleteProducts(ids: [ID!]): [Product]
  createCloudImage(data: CloudImageCreateInput): CloudImage
  createCloudImages(data: [CloudImagesCreateInput]): [CloudImage]
  updateCloudImage(id: ID!, data: CloudImageUpdateInput): CloudImage
  updateCloudImages(data: [CloudImagesUpdateInput]): [CloudImage]
  deleteCloudImage(id: ID!): CloudImage
  deleteCloudImages(ids: [ID!]): [CloudImage]
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  allUsers(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]
  User(where: UserWhereUniqueInput!): User
  _allUsersMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use usersCount instead."
    )
  usersCount(where: UserWhereInput! = {}): Int
  allProducts(
    where: ProductWhereInput! = {}
    search: String
    sortBy: [SortProductsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProductOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Product!]
  Product(where: ProductWhereUniqueInput!): Product
  _allProductsMeta(
    where: ProductWhereInput! = {}
    search: String
    sortBy: [SortProductsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProductOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use productsCount instead."
    )
  productsCount(where: ProductWhereInput! = {}): Int
  allCloudImages(
    where: CloudImageWhereInput! = {}
    search: String
    sortBy: [SortCloudImagesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CloudImageOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [CloudImage!]
  CloudImage(where: CloudImageWhereUniqueInput!): CloudImage
  _allCloudImagesMeta(
    where: CloudImageWhereInput! = {}
    search: String
    sortBy: [SortCloudImagesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CloudImageOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use cloudImagesCount instead."
    )
  cloudImagesCount(where: CloudImageWhereInput! = {}): Int
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
